<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/barry/circleme/ui/navigation/AppNavigation.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/barry/circleme/ui/navigation/AppNavigation.kt" />
              <option name="originalContent" value="package com.barry.circleme.ui.navigation&#10;&#10;import androidx.compose.animation.ExperimentalAnimationApi&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.slideInHorizontally&#10;import androidx.compose.animation.slideOutHorizontally&#10;import androidx.compose.runtime.Composable&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.navigation.navArgument&#10;import com.barry.circleme.ui.auth.AuthScreen&#10;import com.barry.circleme.ui.chat.ChatScreen&#10;import com.barry.circleme.ui.comments.CommentsScreen&#10;import com.barry.circleme.ui.conversations.ConversationsScreen&#10;import com.barry.circleme.ui.create_post.CreatePostScreen&#10;import com.barry.circleme.ui.new_conversation.NewConversationScreen&#10;import com.barry.circleme.ui.video_call.VideoCallScreen&#10;import com.barry.circleme.ui.voice_call.VoiceCallScreen&#10;import com.google.firebase.auth.ktx.auth&#10;import com.google.firebase.ktx.Firebase&#10;&#10;@OptIn(ExperimentalAnimationApi::class)&#10;@Composable&#10;fun AppNavigation() {&#10;    val navController = rememberNavController()&#10;    val startDestination = if (Firebase.auth.currentUser != null) Routes.MAIN_SCREEN else Routes.AUTH_SCREEN&#10;&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = startDestination,&#10;    ) {&#10;        composable(Routes.AUTH_SCREEN) {&#10;            AuthScreen(onSignInSuccess = {&#10;                navController.navigate(Routes.MAIN_SCREEN) {&#10;                    popUpTo(Routes.AUTH_SCREEN) { inclusive = true }&#10;                }&#10;            })&#10;        }&#10;        composable(Routes.MAIN_SCREEN) {&#10;            MainScreen(appNavController = navController)&#10;        }&#10;        composable(&#10;            Routes.CREATE_POST_SCREEN,&#10;            enterTransition = { slideInHorizontally(initialOffsetX = { it }, animationSpec = tween(300)) + fadeIn() },&#10;            exitTransition = { slideOutHorizontally(targetOffsetX = { it }, animationSpec = tween(300)) + fadeOut() }&#10;        ) {&#10;            CreatePostScreen(&#10;                onPostCreated = { navController.popBackStack() },&#10;                onNavigateBack = { navController.popBackStack() }&#10;            )&#10;        }&#10;        composable(&#10;            route = &quot;${Routes.CHAT_SCREEN}/{recipientId}&quot;,&#10;            arguments = listOf(navArgument(&quot;recipientId&quot;) { type = NavType.StringType })&#10;        ) {&#10;            ChatScreen(&#10;                onNavigateBack = { navController.popBackStack() },&#10;                onNavigateToVideoCall = { recipientId -&gt; navController.navigate(&quot;${Routes.VIDEO_CALL_SCREEN}/$recipientId&quot;) },&#10;                onNavigateToVoiceCall = { recipientId -&gt; navController.navigate(&quot;${Routes.VOICE_CALL_SCREEN}/$recipientId&quot;) }&#10;            )&#10;        }&#10;        composable(Routes.MESSAGES_SCREEN) {&#10;            ConversationsScreen(&#10;                onConversationClick = { recipientId -&gt;&#10;                    navController.navigate(&quot;${Routes.CHAT_SCREEN}/$recipientId&quot;)&#10;                },&#10;                onNavigateBack = { navController.popBackStack() },&#10;                onNewConversation = { navController.navigate(Routes.NEW_CONVERSATION_SCREEN) }&#10;            )&#10;        }&#10;        composable(&quot;${Routes.COMMENTS_SCREEN}/{postId}&quot;) {&#10;            CommentsScreen(&#10;                onNavigateBack = { navController.popBackStack() }&#10;            )&#10;        }&#10;        composable(&#10;            route = &quot;${Routes.VOICE_CALL_SCREEN}/{recipientId}&quot;,&#10;            arguments = listOf(navArgument(&quot;recipientId&quot;) { type = NavType.StringType })&#10;        ) {&#10;            VoiceCallScreen(onNavigateBack = { navController.popBackStack() })&#10;        }&#10;        composable(&#10;            route = &quot;${Routes.VIDEO_CALL_SCREEN}/{recipientId}&quot;,&#10;            arguments = listOf(navArgument(&quot;recipientId&quot;) { type = NavType.StringType })&#10;        ) {&#10;            VideoCallScreen(onNavigateBack = { navController.popBackStack() })&#10;        }&#10;        composable(Routes.NEW_CONVERSATION_SCREEN) {&#10;            NewConversationScreen(onUserClick = { recipientId -&gt;&#10;                navController.navigate(&quot;${Routes.CHAT_SCREEN}/$recipientId&quot;) {&#10;                    popUpTo(Routes.MESSAGES_SCREEN)&#10;                }&#10;            })&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.barry.circleme.ui.navigation&#10;&#10;import androidx.compose.animation.ExperimentalAnimationApi&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.slideInHorizontally&#10;import androidx.compose.animation.slideOutHorizontally&#10;import androidx.compose.runtime.Composable&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.navigation.navArgument&#10;import com.barry.circleme.ui.auth.AuthScreen&#10;import com.barry.circleme.ui.chat.ChatScreen&#10;import com.barry.circleme.ui.comments.CommentsScreen&#10;import com.barry.circleme.ui.conversations.ConversationsScreen&#10;import com.barry.circleme.ui.create_post.CreatePostScreen&#10;import com.barry.circleme.ui.new_conversation.NewConversationScreen&#10;import com.barry.circleme.ui.conversations.ConversationsViewModel&#10;import com.barry.circleme.ui.video_call.VideoCallScreen&#10;import com.barry.circleme.ui.voice_call.VoiceCallScreen&#10;import com.google.firebase.auth.ktx.auth&#10;import com.google.firebase.ktx.Firebase&#10;&#10;@OptIn(ExperimentalAnimationApi::class)&#10;@Composable&#10;fun AppNavigation() {&#10;    val navController = rememberNavController()&#10;    val startDestination = if (Firebase.auth.currentUser != null) Routes.MAIN_SCREEN else Routes.AUTH_SCREEN&#10;&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = startDestination,&#10;    ) {&#10;        composable(Routes.AUTH_SCREEN) {&#10;            AuthScreen(onSignInSuccess = {&#10;                navController.navigate(Routes.MAIN_SCREEN) {&#10;                    popUpTo(Routes.AUTH_SCREEN) { inclusive = true }&#10;                }&#10;            })&#10;        }&#10;        composable(Routes.MAIN_SCREEN) {&#10;            MainScreen(appNavController = navController)&#10;        }&#10;        composable(&#10;            Routes.CREATE_POST_SCREEN,&#10;            enterTransition = { slideInHorizontally(initialOffsetX = { it }, animationSpec = tween(300)) + fadeIn() },&#10;            exitTransition = { slideOutHorizontally(targetOffsetX = { it }, animationSpec = tween(300)) + fadeOut() }&#10;        ) {&#10;            CreatePostScreen(&#10;                onPostCreated = { navController.popBackStack() },&#10;                onNavigateBack = { navController.popBackStack() }&#10;            )&#10;        }&#10;        composable(&#10;            route = &quot;${Routes.CHAT_SCREEN}/{recipientId}&quot;,&#10;            arguments = listOf(navArgument(&quot;recipientId&quot;) { type = NavType.StringType })&#10;        ) {&#10;            ChatScreen(&#10;                onNavigateBack = { navController.popBackStack() },&#10;                onNavigateToVideoCall = { recipientId -&gt; navController.navigate(&quot;${Routes.VIDEO_CALL_SCREEN}/$recipientId&quot;) },&#10;                onNavigateToVoiceCall = { recipientId -&gt; navController.navigate(&quot;${Routes.VOICE_CALL_SCREEN}/$recipientId&quot;) }&#10;            )&#10;        }&#10;        composable(Routes.MESSAGES_SCREEN) {&#10;            ConversationsScreen(&#10;                onConversationClick = { recipientId -&gt;&#10;                    navController.navigate(&quot;${Routes.CHAT_SCREEN}/$recipientId&quot;)&#10;                },&#10;                onNavigateBack = { navController.popBackStack() },&#10;                onNewConversation = { navController.navigate(Routes.NEW_CONVERSATION_SCREEN) }&#10;            )&#10;        }&#10;        composable(&quot;${Routes.COMMENTS_SCREEN}/{postId}&quot;) {&#10;            CommentsScreen(&#10;                onNavigateBack = { navController.popBackStack() }&#10;            )&#10;        }&#10;        composable(&#10;            route = &quot;${Routes.VOICE_CALL_SCREEN}/{recipientId}&quot;,&#10;            arguments = listOf(navArgument(&quot;recipientId&quot;) { type = NavType.StringType })&#10;        ) {&#10;            VoiceCallScreen(onNavigateBack = { navController.popBackStack() })&#10;        }&#10;        composable(&#10;            route = &quot;${Routes.VIDEO_CALL_SCREEN}/{recipientId}&quot;,&#10;            arguments = listOf(navArgument(&quot;recipientId&quot;) { type = NavType.StringType })&#10;        ) {&#10;            VideoCallScreen(onNavigateBack = { navController.popBackStack() })&#10;        }&#10;        composable(Routes.NEW_CONVERSATION_SCREEN) {&#10;            // Use a ConversationsViewModel instance to create/start the conversation before navigating&#10;            val convViewModel: ConversationsViewModel = viewModel()&#10;            NewConversationScreen(onUserClick = { user -&gt;&#10;                convViewModel.startConversation(user) { conversationId -&gt;&#10;                    // After the conversation doc is created, navigate to chat screen&#10;                    navController.navigate(&quot;${Routes.CHAT_SCREEN}/$conversationId&quot;) {&#10;                        popUpTo(Routes.MESSAGES_SCREEN)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>